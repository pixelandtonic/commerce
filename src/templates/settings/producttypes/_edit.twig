{% extends "commerce/_layouts/cp" %}
{% set title = productType.id ? productType.name : 'Create a new product type'|t('commerce') %}

{% set crumbs = [
    { label: "Commerce Settings"|t('commerce'), url: url('commerce/settings') },
    { label: "Product Types"|t('commerce'), url: url('commerce/settings/producttypes') },
] %}

{% set selectedSubnavItem = 'settings' %}

{% set headlessMode = craft.app.config.general.headlessMode %}

{% set fullPageForm = true %}

{% import "_includes/forms" as forms %}

{% block content %}
    <input type="hidden" name="action"
           value="commerce/product-types/save-product-type">
    {{ redirectInput('commerce/settings/producttypes') }}
    {% if productType.id %}
        <input type="hidden" name="productTypeId" value="{{ productType.id }}">
    {% endif %}

    <div id="product-type-settings">
        {% macro templateField(productType) %}
            {% from "_includes/forms" import textField %}

            {{ textField({
                label: "Product Template"|t('commerce'),
                instructions: "The template to use when a product’s URL is requested."|t('commerce'),
                id: 'template',
                class: 'ltr',
                name: 'template',
                value: productType.template,
                errors: productType.getErrors('template')
            }) }}
        {% endmacro %}

        {% macro productTitleFormatField(productType) %}
            {% import '_includes/forms' as forms %}

                {{ forms.lightswitchField({
                    label: "Show the Title field for products"|t('commerce'),
                    name: 'hasProductTitleField',
                    toggle: '#productTitle-container',
                    reverseToggle: '#productTitleFormat-container, .fld-product-title-field-icon',
                    on: productType.hasProductTitleField
                }) }}

            {% if craft.app.getIsMultiSite() %}
                <div id="productTitle-container"{% if not productType.hasProductTitleField %} class="hidden"{% endif %}>
                    {{ forms.selectField({
                        label: '{name} Translation Method'|t('app', {
                            name: 'Title'|t('app'),
                        }),
                        instructions: 'How should {name} values be translated?'|t('app', {
                            name: 'Title'|t('app'),
                        }),
                        id: 'product-translation-method',
                        name: 'productTitleTranslationMethod',
                        options: [
                            { value: 'none', label: 'Not translatable'|t('app') },
                            { value: 'site', label: 'Translate for each site'|t('app') },
                            { value: 'siteGroup', label: 'Translate for each site group'|t('app') },
                            { value: 'language', label: 'Translate for each language'|t('app') },
                            { value: 'custom', label: 'Custom…'|t('app') },
                        ]|filter,
                        value: productType.productTitleTranslationMethod,
                        toggle: true,
                        targetPrefix: 'product-translation-method-'
                    }) }}

                    <div id="product-translation-method-custom" {% if productType.productTitleTranslationMethod != 'custom' %}class="hidden"{% endif %}>
                        {{ forms.textField({
                            label: '{name} Translation Key Format'|t('app', {
                                name: 'Title'|t('app'),
                            }),
                            instructions: 'Template that defines the {name} field’s custom “translation key” format. Values will be copied to all sites that produce the same key.'|t('app', {
                                name: 'Title'|t('app'),
                            }),
                            id: 'product-translation-key-format',
                            name: 'productTitleTranslationKeyFormat',
                            value: productType.productTitleTranslationKeyFormat,
                            errors: productType.getErrors('productTitleTranslationKeyFormat'),
                            data: {
                                'error-key': 'productTitleTranslationKeyFormat',
                            },
                        }) }}
                    </div>
                </div>
            {% endif %}

                <div id="productTitleFormat-container"{% if productType.hasProductTitleField %} class="hidden"{% endif %}>
                    {{ forms.textField({
                        label: "Product Title Format"|t('commerce'),
                        instructions: "What the auto-generated product titles should look like. You can include tags that output product properties, such as {ex1} or {ex2}. All custom fields used must be set to required."|t('commerce', { ex1: '<code>{sku}</code>', ex2: '<code>{myProductsCustomField}</code>' }),
                        id: 'productTitleFormat',
                        class: 'code ltr',
                        name: 'productTitleFormat',
                        value: productType.productTitleFormat,
                        errors: productType.getErrors('productTitleFormat')
                    }) }}
                </div>
        {% endmacro %}

        {% macro variantTitleFormatField(productType) %}
            {% import '_includes/forms' as forms %}

            <div id="variant-settings">
                {{ forms.lightswitchField({
                    label: "Show the Title field for variants"|t('commerce'),
                    name: 'hasVariantTitleField',
                    toggle: '#variantTitle-container',
                    reverseToggle: '#variantTitleFormat-container, .fld-variant-title-field-icon',
                    on: productType.hasVariantTitleField
                }) }}

                {% if craft.app.getIsMultiSite() %}
                    <div id="variantTitle-container"{% if not productType.hasVariantTitleField %} class="hidden"{% endif %}>
                        {{ forms.selectField({
                            label: '{name} Translation Method'|t('app', {
                                name: 'Title'|t('app'),
                            }),
                            instructions: 'How should {name} values be translated?'|t('app', {
                                name: 'Title'|t('app'),
                            }),
                            id: 'variant-translation-method',
                            name: 'variantTitleTranslationMethod',
                            options: [
                                { value: 'none', label: 'Not translatable'|t('app') },
                                { value: 'site', label: 'Translate for each site'|t('app') },
                                { value: 'siteGroup', label: 'Translate for each site group'|t('app') },
                                { value: 'language', label: 'Translate for each language'|t('app') },
                                { value: 'custom', label: 'Custom…'|t('app') },
                            ]|filter,
                            value: productType.variantTitleTranslationMethod,
                            toggle: true,
                            targetPrefix: 'variant-translation-method-'
                        }) }}

                        <div id="variant-translation-method-custom" {% if productType.variantTitleTranslationMethod != 'custom' %}class="hidden"{% endif %}>
                            {{ forms.textField({
                                label: '{name} Translation Key Format'|t('app', {
                                    name: 'Title'|t('app'),
                                }),
                                instructions: 'Template that defines the {name} field’s custom “translation key” format. Values will be copied to all sites that produce the same key.'|t('app', {
                                    name: 'Title'|t('app'),
                                }),
                                id: 'variant-translation-key-format',
                                name: 'variantTitleTranslationKeyFormat',
                                value: productType.variantTitleTranslationKeyFormat,
                                errors: productType.getErrors('variantTitleTranslationKeyFormat'),
                                data: {
                                    'error-key': 'variantTitleTranslationKeyFormat',
                                },
                            }) }}
                        </div>
                    </div>
                {% endif %}

                <div id="variantTitleFormat-container"{% if productType.hasVariantTitleField %} class="hidden"{% endif %}>
                    {{ forms.textField({
                        label: "Variant Title Format"|t('commerce'),
                        instructions: "What the auto-generated variant titles should look like. You can include tags that output variant properties, such as {ex1} or {ex2}. All custom fields used must be set to required."|t('commerce', { ex1: '<code>{sku}</code>', ex2: '<code>{myVariantsCustomField}</code>' }),
                        id: 'variantTitleFormat',
                        class: 'code ltr',
                        name: 'variantTitleFormat',
                        value: productType.variantTitleFormat,
                        errors: productType.getErrors('variantTitleFormat')
                    }) }}
                </div>

            </div>
        {% endmacro %}

        {% from _self import variantTitleFormatField, productTitleFormatField, uriFormatText %}


        {{ forms.textField({
            first: true,
            label: "Name"|t('commerce'),
            instructions: "What this product type will be called in the control panel."|t('commerce'),
            id: 'name',
            name: 'name',
            value: productType.name,
            errors: productType.getErrors('name'),
            autofocus: true,
            required: true
        }) }}

        {{ forms.textField({
            label: "Handle"|t('commerce'),
            instructions: "How you’ll refer to this product type in the templates."|t('commerce'),
            id: 'handle',
            class: 'code',
            name: 'handle',
            value: productType.handle,
            errors: productType.getErrors('handle'),
            required: true
        }) }}

        {{ forms.lightswitchField({
            label: "Enable structure for products of this type"|t('commerce'),
            warning: productType.id ? 'Changing this may result in data loss.'|t('app'),
            id: 'isStructure',
            name: 'isStructure',
            on: productType.isStructure,
            toggle: 'isStructureFields',
        }) }}

        <div id="isStructureFields" class="field {% if not productType.isStructure %}hidden{% endif %}">
            {{ forms.selectField({
                label: 'Default {type} Placement'|t('app', {type: 'Product'|t('commerce')}),
                instructions: 'Where new {type} should be placed by default in the structure.'|t('app', {type: 'products'|t('commerce')}),
                id: 'default-placement',
                name: 'defaultPlacement',
                options: [
                    {label: 'Before other {type}'|t('app', {type: 'products'|t('commerce')}), value: 'beginning'},
                    {label: 'After other {type}'|t('app', {type: 'products'|t('commerce')}), value: 'end'},
                ],
                value: productType.defaultPlacement,
            }) }}

            {{ forms.textField({
                label: "Max Levels"|t('app'),
                instructions: "The maximum number of levels this product type can have. Leave blank if you don’t care."|t('commerce'),
                id: 'maxLevels',
                name: 'maxLevels',
                value: productType.maxLevels,
                size: 5,
                errors: productType.getErrors('maxLevels')
            }) }}
        </div>

        {{ forms.lightswitchField({
            label: 'Enable versioning for products of this type'|t('app'),
            id: 'enableVersioning',
            name: 'enableVersioning',
            on: productType.enableVersioning
        }) }}

        {{ productTitleFormatField(productType) }}

        {{ forms.textField({
            label: "Automatic SKU Format"|t('commerce'),
            instructions: "What the unique auto-generated SKUs should look like, when a SKU field is submitted without a value. You can include tags that output properties, such as {ex1} or {ex2}"|t('commerce', { ex1: '<code>{product.slug}</code>', ex2: '<code>{myVariantCustomField}</code>' }),
            id: 'skuFormat',
            class: 'code ltr',
            name: 'skuFormat',
            value: productType.skuFormat,
            errors: productType.getErrors('skuFormat')
        }) }}

        {{ forms.textField({
            label: "Order Description Format"|t('commerce'),
            instructions: "How this product will be described on a line item in an order. You can include tags that output properties, such as {ex1} or {ex2}"|t('commerce', { ex1: '<code>{product.title}</code>', ex2: '<code>{myVariantCustomField}</code>' }),
            id: 'descriptionFormat',
            class: 'code ltr',
            name: 'descriptionFormat',
            value: productType.descriptionFormat,
            errors: productType.getErrors('descriptionFormat')
        }) }}

        {{ forms.textField({
            label: 'Max Variants'|t('commerce'),
            id: 'maxVariants',
            name: 'maxVariants',
            value: productType.maxVariants,
            errors: productType.getErrors('maxVariants'),
            size: 2,
        }) }}

        {{ forms.lightswitchField({
            label: "Show the Dimensions and Weight fields for products of this type"|t('commerce'),
            id: 'hasDimensions',
            name: 'hasDimensions',
            on: productType.hasDimensions,
        }) }}

        <hr>

        {{ variantTitleFormatField(productType) }}

        <hr>

        {% set siteRows = [] %}
        {% set siteErrors = productType.getErrors('siteSettings') %}

        {% for site in craft.app.sites.getAllSites() %}
            {% set siteSettings = productType.siteSettings[site.id] ?? null %}
            {% if siteSettings %}
                {% for attribute, errors in siteSettings.getErrors() %}
                    {% set siteErrors = siteErrors|merge(errors) %}
                {% endfor %}
            {% endif %}
            {% set siteRows = siteRows|merge({
                (site.handle): {
                    heading: site.name|t('site')|e,
                    enabled: include('_includes/forms/lightswitch.twig', {
                        name: 'sites['~site.handle~'][enabled]',
                        on: brandNewProductType or siteSettings,
                        value: site.id,
                        small: true
                    }),
                    uriFormat: {
                        value: siteSettings ? siteSettings.uriFormat,
                        hasErrors: (siteSettings ? siteSettings.hasErrors('uriFormat'))
                    },
                    template: not headlessMode ? {
                        value: siteSettings ? siteSettings.template,
                        hasErrors: siteSettings ? siteSettings.hasErrors('template'),
                    },
                    enabledByDefault: siteSettings ? siteSettings.enabledByDefault : true,
                }|filter
            }) %}
        {% endfor %}

        {{ forms.editableTableField({
            label: "Site Settings"|t('app'),
            instructions: "Choose which sites this product type should be available in, and configure the site-specific settings."|t('commerce'),
            id: 'sites',
            name: 'sites',
            cols: {
                heading: {
                    type: 'heading',
                    heading: "Site"|t('app'),
                    thin: true
                },
                enabled: {
                    type: 'heading',
                    thin: true,
                    class: not craft.app.getIsMultiSite() ? 'hidden'
                },
                uriFormat: {
                    type: 'singleline',
                    heading: "Product URI Format"|t('commerce'),
                    info: "What product URIs should look like for the site."|t('commerce'),
                    placeholder: "Leave blank if products don’t have URLs"|t('commerce'),
                    code: true
                },
                template: {
                    type: 'template',
                    heading: "Template"|t('app'),
                    info: "Which template should be loaded when a product’s URL is requested."|t('commerce'),
                    code: true
                },
                enabledByDefault: {
                    type: 'lightswitch',
                    heading: "Default Status"|t('app'),
                    thin: true,
                }
            }|filter,
            rows: siteRows,
            fullWidth: true,
            allowAdd: false,
            allowDelete: false,
            allowReorder: false,
            errors: siteErrors|unique
        }) }}

        {% if craft.app.getIsMultiSite() %}
            <div class="field">
                {{ forms.selectField({
                    label: 'Propagation Method'|t('app'),
                    instructions: 'Of the enabled sites above, which sites should products in this product type be saved to?'|t('commerce'),
                    warning: productType.id and productType.propagationMethod.value != 'none' and productType.siteSettings|length > 1 ? 'Changing this may result in data loss.'|t('app'),
                    id: 'propagationMethod',
                    name: 'propagationMethod',
                    options: [
                        { value: 'none', label: 'Only save product to the site they were created in'|t('commerce') },
                        { value: 'siteGroup', label: 'Save product to other sites in the same site group'|t('commerce') },
                        { value: 'language', label: 'Save product to other sites with the same language'|t('commerce') },
                        { value: 'all', label: 'Save product to all sites enabled for this product type'|t('commerce') },
                        { value: 'custom', label: 'Let each product choose which sites it should be saved to'|t('commerce') },
                    ],
                    value: productType.propagationMethod.value
                }) }}
            </div>
        {% endif %}
    </div>

    <div id="tax-and-shipping" class="hidden">
        <h3>{{ 'Available Shipping Categories'|t('commerce') }} </h3>

        {% for cat in productType.getShippingCategories() %}
            {% if loop.first %}<ul class="bullets">{% endif %}
            {% if currentUser.can('commerce-manageShipping') %}
                <li><a href="{{ cat.getCpEditUrl() }}">{{ cat.name }} ({{ cat.store.name }})</a></li>
            {% else %}
                <li>{{ cat.name }} ({{ cat.store.name }})</li>
            {% endif %}
            {% if loop.last %}</ul>{% endif %}
        {% endfor %}

        <h3>{{ 'Available Tax Categories'|t('commerce') }} </h3>
        {% for cat in productType.getTaxCategories() %}
            {% if loop.first %}<ul class="bullets">{% endif %}
            {% if currentUser.can('commerce-manageTax') %}
                <li><a href="{{ cat.getCpEditUrl() }}">{{ cat.name }}</a></li>
            {% else %}
                <li>{{ cat.name }}</li>
            {% endif %}
            {% if loop.last %}</ul>{% endif %}
        {% endfor %}
    </div>
    <div id="product-fields" class="hidden">

        {{ forms.fieldLayoutDesignerField({
            fieldLayout: productType.getProductFieldLayout(),
        }) }}

    </div>

    <div id="variant-fields" class="hidden">

        {% namespace "variant-layout" %}
            {{ forms.fieldLayoutDesignerField({
                fieldLayout: productType.getVariantFieldLayout(),
            }) }}
        {% endnamespace %}

    </div>
{% endblock %}

{% if brandNewProductType %}
    {% js %}
        new Craft.HandleGenerator('#name', '#handle');

        {% for site in craft.app.sites.getAllSites() %}
            new Craft.UriFormatGenerator('#name', '#sites tr[data-id="{{ site.handle }}"] textarea[name$="[uriFormat]"]', { suffix: '/{slug}' });
            new Craft.UriFormatGenerator('#name', '#sites tr[data-id="{{ site.handle }}"] textarea[name$="[template]"]', { suffix: '/_product' });
        {% endfor %}
    {% endjs %}
{% endif %}
